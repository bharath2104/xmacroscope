#
# Custom scalar & enumeration types
#
# Define an ISO-8601 date object for use in types
scalar Date

#
# Interfaces
#
interface Message {
  type: String
  timestamp: String
}

#
# Types
#
type MessageAny implements Message {
  type: String!
  timestamp: String!
}

type MessageRun implements Message {
  type: String
  timestamp: String
  run: Run
}

type Person {
  id: ID!
  icon: String
  color: String
  ageGroup: String
  favoriteActivity: String
  height: Int
  zipCode: String
  state: String
  latitude: Float
  longitude: Float
}

type Run {
  id: ID
  start: Date
  end: Date
  personId: ID
  person: Person
}

type RunResult {
  person: Person
  started: Boolean
  falseStart: Boolean
  timeMillis: Int
}

type Setting {
  location: String
  usState: String
  latitude: Float
  longitude: Float
  preRunDelay: Int
  postRunDelay: Int
  startLineTimeout: Int
  runTimeout: Int
  attractDelay: Int
}

#
# Inputs
#
input MessageAnyInput {
  type: String!
  timestamp: String!
}

input PersonInput {
  name: String
  icon: String
  color: String
  ageGroup: String
  favoriteActivity: String
  height: Int
  zipCode: String
  state: String
  latitude: Float
  longitude: Float
}

input RunInput {
  start: Date!
  person: PersonInput
}

input RunRecordFinishInput {
  id: ID!
  finish: Date!
}
