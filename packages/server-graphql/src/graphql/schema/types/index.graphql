# Define GraphQL types

scalar Date

type User {
  id: String
  sub: String
  email: String
}

type Person {
  id: ID!
  firstName: String
  middleName: String
  lastName: String
  preferedName: String
  preferedPronouns: String
  createdAt: String
  updatedAt: String
}

type Avatar {
  id: ID!
  name: String
  runMillis: Int
}

type Run {
  avatar: Avatar!
  persona: Persona!
  timestamp: String
  lane: Int
  started: Boolean
  falseStart: Boolean
  timeMillis: Int
}

type RunRecordOld {
  avatar: ID!
  persona: ID!
  timestamp: String
  lane: Int
  started: Boolean
  falseStart: Boolean
  timeMillis: Int
  asRun: Run
}

type RunRecord {
  id: ID
  opponent: String
  opponentName: String
  opponentTime: String
  start: Date
  end: Date
  PersonId: ID
  Person: Persona
}

interface Message {
  type: String
  timestamp: String
}

type RunSelectedMessage implements Message {
  type: String
  timestamp: String
  avatar: Avatar
}

type RunInitiatedMessage implements Message {
  type: String
  timestamp: String
  avatar: Avatar
}

type RunResult {
  lane: Int
  persona: Persona
  started: Boolean
  falseStart: Boolean
  timeMillis: Int
}

type RunCompletedMessage implements Message {
  type: String
  timestamp: String
  avatar: Avatar
  results: [RunResult]!
}

type AnyMessage implements Message {
  type: String!
  timestamp: String!
  avatar: Avatar
  results: [RunResult]
}

type Setting {
  location: String
  latitude: Float
  longitude: Float
  preRunDelay: Int
  postRunDelay: Int
  startLineTimeout: Int
  runTimeout: Int
  attractDelay: Int
}

input NewRunResult {
  lane: Int
  persona: NewPersona
  started: Boolean
  falseStart: Boolean
  timeMillis: Int
}

input NewAnyMessage {
  type: String!
  timestamp: String!
  avatar: NewAvatar
  results: [NewRunResult]
}

input NewAvatar {
  name: String
  runMillis: Int
}

input SelectRun {
  opponent: String
  opponentName: String
  opponentTime: Int
}

input NewRunRecord {
  start: Date!
  opponent: String
  opponentName: String
  opponentTime: Int
  persona: NewPersona
}

input FinishRunRecord {
  id: ID!
  finish: Date!
}

input UpdateRunRecord {
  avatar: ID!
  persona: ID!
  timestamp: String
  lane: Int
  started: Boolean
  falseStart: Boolean
  timeMillis: Int
}

enum GENDER {
  male
  female
  other
}

enum HANDEDNESS {
  left
  right
  ambidextrous
}

type Persona {
  id: ID!
  name: String
  icon: String
  color: String
  gender: GENDER
  ageGroup: String
  favoriteActivity: String
  handedness: HANDEDNESS
  height: Int
  siblings: Int
  zipCode: String
  state: String
  latitude: Float
  longitude: Float
}

input NewPersona {
  name: String
  icon: String
  color: String
  gender: GENDER
  ageGroup: String
  favoriteActivity: String
  handedness: HANDEDNESS
  height: Int
  siblings: Int
  zipCode: String
  state: String
  latitude: Float
  longitude: Float
}

